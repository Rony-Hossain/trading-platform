name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'  # Every Monday at 2 AM

jobs:
  trivy_scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail build on findings

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy on Docker images
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'trading-platform:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  grype_scan:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Anchore Grype scan
        uses: anchore/scan-action@v3
        id: grype
        with:
          path: "."
          severity-cutoff: high
          fail-build: true

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

  semgrep_scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep scan \
            --config auto \
            --sarif \
            --output semgrep-results.sarif \
            --severity ERROR

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'semgrep-results.sarif'

  secrets_scan:
    name: Git Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  dependency_check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-results.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --requirement requirements.txt --format json --output pip-audit-results.json
        continue-on-error: true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-results.json
            pip-audit-results.json

  sbom_generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Scan SBOM with Grype
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.spdx.json
          severity-cutoff: high
          fail-build: true

  container_hardening_check:
    name: Container Hardening Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile best practices
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Run Dockle (container linter)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 1 \
            --exit-level fatal \
            trading-platform:latest

  license_check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses \
            --format=json \
            --output-file=licenses.json \
            --fail-on="GPL;AGPL"  # Fail on copyleft licenses

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  security_summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trivy_scan, grype_scan, semgrep_scan, secrets_scan, dependency_check]
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy Scan: ${{ needs.trivy_scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Grype Scan: ${{ needs.grype_scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep SAST: ${{ needs.semgrep_scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets Scan: ${{ needs.secrets_scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Check: ${{ needs.dependency_check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Acceptance Criteria" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 0 High/Critical CVEs in production images" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No secrets in repository" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All dependencies scanned" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated" >> $GITHUB_STEP_SUMMARY
