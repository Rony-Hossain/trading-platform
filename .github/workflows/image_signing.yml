name: Build, Sign, and Push Container Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_sign:
    name: Build, Sign, and Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For Cosign signing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.hardened
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

      - name: Sign container image with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Verify signature
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: spdx-json
          output-file: sbom-${{ github.sha }}.spdx.json

      - name: Attach SBOM to image
        run: |
          cosign attach sbom --sbom sbom-${{ github.sha }}.spdx.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Sign SBOM
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha256-${{ steps.build-and-push.outputs.digest }}.sbom

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Create security attestation
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo '{"buildDate":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","gitCommit":"'${{ github.sha }}'","gitRef":"'${{ github.ref }}'"}' > attestation.json
          cosign attest --yes \
            --predicate attestation.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Create deployment summary
        run: |
          echo "## Container Image Signed and Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image signed with Cosign (keyless)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated and attached" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scan passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security attestation created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verify Signature" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "cosign verify \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  verify_admission:
    name: Verify Admission Policy
    runs-on: ubuntu-latest
    needs: build_and_sign
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy admission policy
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: policy.sigstore.dev/v1beta1
          kind: ClusterImagePolicy
          metadata:
            name: trading-platform-policy
          spec:
            images:
              - glob: "ghcr.io/${{ github.repository }}/*"
            authorities:
              - keyless:
                  url: https://fulcio.sigstore.dev
                  identities:
                    - issuer: https://token.actions.githubusercontent.com
                      subject: https://github.com/${{ github.repository }}/.github/workflows/image_signing.yml@refs/heads/main
          EOF

      - name: Verify policy
        run: |
          echo "✅ Admission policy deployed"
          echo "Only signed images from this repository can be deployed"
