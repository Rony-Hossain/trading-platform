version: '3.8'

services:
  # MLflow Tracking Server
  mlflow-server:
    image: python:3.9-slim
    container_name: trading-mlflow-server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow_user:mlflow_pass@postgres-mlflow:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - mlflow_data:/mlflow
      - ./mlflow_requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install -r /requirements.txt &&
        mlflow server 
        --backend-store-uri postgresql://mlflow_user:mlflow_pass@postgres-mlflow:5432/mlflow_db
        --default-artifact-root s3://mlflow-artifacts
        --host 0.0.0.0
        --port 5000
      "
    depends_on:
      postgres-mlflow:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL for MLflow
  postgres-mlflow:
    image: postgres:13
    container_name: trading-postgres-mlflow
    environment:
      - POSTGRES_DB=mlflow_db
      - POSTGRES_USER=mlflow_user
      - POSTGRES_PASSWORD=mlflow_pass
    volumes:
      - postgres_mlflow_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow_user -d mlflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for MLflow Artifacts
  minio:
    image: minio/minio:latest
    container_name: trading-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client - Create buckets
  minio-client:
    image: minio/mc:latest
    container_name: trading-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/mlflow-artifacts --ignore-existing;
      mc policy set public myminio/mlflow-artifacts;
      exit 0;
      "
    networks:
      - mlops-network

  # Redis for caching and monitoring data
  redis-mlops:
    image: redis:7-alpine
    container_name: trading-redis-mlops
    ports:
      - "6380:6379"
    volumes:
      - redis_mlops_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLOps Orchestrator API
  mlops-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.mlops
    container_name: trading-mlops-orchestrator
    ports:
      - "8090:8090"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - MLFLOW_REGISTRY_URI=http://mlflow-server:5000
      - REDIS_URL=redis://redis-mlops:6379
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_db
      - LOG_LEVEL=INFO
    volumes:
      - ./mlops:/app/mlops
      - ./config:/app/config
      - mlops_logs:/app/logs
    depends_on:
      mlflow-server:
        condition: service_healthy
      redis-mlops:
        condition: service_healthy
    networks:
      - mlops-network
      - trading-platform_default  # Connect to main trading platform network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Model Deployment Gateway (Load Balancer for Canary Deployments)
  model-gateway:
    image: nginx:alpine
    container_name: trading-model-gateway
    ports:
      - "8091:80"
    volumes:
      - ./nginx.mlops.conf:/etc/nginx/nginx.conf:ro
      - gateway_logs:/var/log/nginx
    depends_on:
      - mlops-orchestrator
    networks:
      - mlops-network
      - trading-platform_default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # Jupyter Lab for Model Development and Experimentation
  jupyter-lab:
    image: jupyter/scipy-notebook:latest
    container_name: trading-jupyter-lab
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=trading123
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
    volumes:
      - ./experiments:/home/jovyan/experiments
      - jupyter_data:/home/jovyan/work
      - ./mlops:/home/jovyan/mlops:ro
    depends_on:
      - mlflow-server
    networks:
      - mlops-network
    restart: unless-stopped
    command: start-notebook.sh --NotebookApp.token='trading123' --NotebookApp.password=''

volumes:
  mlflow_data:
    driver: local
  postgres_mlflow_data:
    driver: local
  minio_data:
    driver: local
  redis_mlops_data:
    driver: local
  mlops_logs:
    driver: local
  gateway_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_data:
    driver: local

networks:
  mlops-network:
    driver: bridge
    name: trading-mlops-network
  trading-platform_default:
    external: true