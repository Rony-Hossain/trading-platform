services:
  postgres:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
      POSTGRES_HOST_AUTH_METHOD: md5
      # TimescaleDB specific configurations
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Resource limits for TimescaleDB optimization
    shm_size: 256mb
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  market-data-api:
    build: ./services/market-data-service
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379/0
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-5}
      WEBSOCKET_UPDATE_INTERVAL: ${WEBSOCKET_UPDATE_INTERVAL:-5}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Note: analysis-api image is heavy due to ML libs; first build may take long.
  analysis-api:
    build: ./services/analysis-service
    ports:
      - "8003:8003"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379/0
      MARKET_DATA_API: http://market-data-api:8002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  sentiment-service:
    build: ./services/sentiment-service
    ports:
      - "8005:8005"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  fundamentals-service:
    build: ./services/fundamentals-service
    ports:
      - "8006:8006"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  event-data-service:
    build: ./services/event-data-service
    ports:
      - "8007:8007"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
